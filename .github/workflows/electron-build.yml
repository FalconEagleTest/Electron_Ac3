name: Advanced Codec Electron Build
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 720  # Build can take several hours
    env:
      DEPOT_TOOLS_WIN_TOOLCHAIN: "0"
      GYP_MSVS_OVERRIDE_PATH: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise"
      DEPOT_TOOLS_UPDATE: "0"
    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v4

    # Install Visual Studio
    - name: Install Visual Studio
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.8'

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Cache pip dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Configure system (Pagefile setup)
    - name: Configure System Pagefile
      shell: pwsh
      run: |
        # Disable automatic pagefile management
        $computersys = Get-CimInstance Win32_ComputerSystem
        $computersys | Set-CimInstance -Property @{AutomaticManagedPagefile = $false}

        # Remove existing pagefile
        $pagefile = Get-CimInstance -ClassName Win32_PageFileSetting
        if ($pagefile) {
            Remove-CimInstance -InputObject $pagefile
        }

        # Create new pagefile with specified size
        $pageFilePath = "C:\\pagefile.sys"
        $initialSize = [uint32]51200
        $maximumSize = [uint32]51200

        New-CimInstance -ClassName Win32_PageFileSetting -Property @ {
            Name = $pageFilePath
            InitialSize = $initialSize
            MaximumSize = $maximumSize
        } -Namespace "root\\cimv2"

    # Install dependencies
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel ninja

    # Cache depot_tools
    - name: Cache depot_tools
      uses: actions/cache@v3
      with:
        path: ${{ runner.workspace }}/depot_tools
        key: ${{ runner.os }}-depot_tools
        restore-keys: |
          ${{ runner.os }}-depot_tools-

    # Clone depot_tools
    - name: Clone depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    # Fetch and Build Chromium
    - name: Fetch and Build Chromium
      run: |
        fetch chromium
        cd src
        gn gen out/Release --args='is_official_build=true is_debug=false use_proprietary_codecs=true ffmpeg_branding="Chrome" media_use_ffmpeg=true enable_hevc_parser=true enable_dolby_vision_support=true proprietary_codecs=true enable_platform_hevc=true enable_platform_ac3_audio=true enable_platform_dts_audio=true media_codecs_focus_on_extensions=true'
        autoninja -C out/Release chrome

    # Build Electron with codecs
    - name: Build Electron
      run: |
        git clone https://github.com/electron/electron.git
        cd electron
        python script/bootstrap.py
        python script/configure.py -D use_proprietary_codecs=true -D ffmpeg_branding="Chrome"
        python script/build.py -c Release

    # Verify Build
    - name: Verify Build
      run: |
        if (!(Test-Path -Path electron/out/Release/electron.exe)) {
          throw "Build failed: electron.exe not found."
        }

    # Create Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          electron/out/Release/electron.exe
          electron/out/Release/*.pak
          electron/out/Release/locales/*
          electron/out/Release/*.dll
        tag_name: v${{ github.run_number }}
        body: |
          Custom Electron build with advanced codec support:
          - AC3 Audio Support
          - DTS Audio Support
          - Dolby Vision Support
          - HEVC/H.265 Support
          
          Built with FFmpeg Chrome branding for enhanced codec support.
        draft: true

    # Cleanup temporary files
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Recurse -Force ${{ github.workspace }}\depot_tools
        Remove-Item -Recurse -Force ${{ github.workspace }}\src
