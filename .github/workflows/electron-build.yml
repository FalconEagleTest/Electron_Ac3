name: Advanced Codec Electron Build
on:
  workflow_dispatch:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 720  # Build can take several hours
    env:
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0
      DEPOT_TOOLS_UPDATE: 0
      PYTHONIOENCODING: utf-8
      CHROME_HEADLESS: 1
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Visual Studio
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.8'
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Configure System
      shell: pwsh
      run: |
        # Disable automatic pagefile management
        $computersys = Get-CimInstance Win32_ComputerSystem
        $computersys | Set-CimInstance -Property @{AutomaticManagedPagefile = $false}
        
        # Remove existing pagefile
        $pagefile = Get-CimInstance -ClassName Win32_PageFileSetting
        if ($pagefile) {
            Remove-CimInstance -InputObject $pagefile
        }
        
        # Create new pagefile with specified size
        $pageFilePath = "C:\pagefile.sys"
        $initialSize = [uint32]51200
        $maximumSize = [uint32]51200
        
        New-CimInstance -ClassName Win32_PageFileSetting -Property @{
            Name = $pageFilePath
            InitialSize = $initialSize
            MaximumSize = $maximumSize
        } -Namespace "root\cimv2"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel ninja
    
    - name: Setup Build Environment
      shell: pwsh
      run: |
        # Clone depot_tools
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        
        # Configure git
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global core.longpaths true
        
        # Add depot_tools to path
        $env:Path = "${{ github.workspace }}\depot_tools;$env:Path"
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Set Visual Studio path
        $env:GYP_MSVS_OVERRIDE_PATH = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        
        # Create and set git cache
        New-Item -Path "C:\git-cache" -ItemType Directory -Force
        $env:GIT_CACHE_PATH = "C:\git-cache"
        
        # Initialize gclient
        gclient
    
    - name: Fetch Chromium
      shell: pwsh
      run: |
        # Use the fetch tool with retry logic
        $maxAttempts = 3
        $attempt = 1
        do {
            try {
                Write-Host "Attempt $attempt to fetch chromium..."
                fetch --no-history chromium
                $success = $true
            }
            catch {
                $success = $false
                if ($attempt -lt $maxAttempts) {
                    Write-Host "Fetch failed, waiting before retry..."
                    Start-Sleep -Seconds 30
                }
                $attempt++
            }
        } while (!$success -and $attempt -le $maxAttempts)
        
        if (!$success) {
            throw "Failed to fetch chromium after $maxAttempts attempts"
        }
    
    - name: Build Chromium
      shell: pwsh
      run: |
        cd src
        
        # Create GN args file
        $gnArgs = @'
is_official_build = true
is_debug = false
use_proprietary_codecs = true
ffmpeg_branding = "Chrome"
media_use_ffmpeg = true
enable_hevc_parser = true
enable_dolby_vision_support = true
proprietary_codecs = true
enable_platform_hevc = true
enable_platform_ac3_audio = true
enable_platform_dts_audio = true
media_codecs_focus_on_extensions = true
'@
        $gnArgs | Out-File -FilePath "args.gn" -Encoding utf8
        
        # Generate and build
        gn gen out/Release --args="$(Get-Content args.gn -Raw)"
        autoninja -C out/Release chrome
    
    - name: Build Electron
      shell: pwsh
      run: |
        git clone https://github.com/electron/electron.git
        cd electron
        python script/bootstrap.py
        python script/configure.py -D use_proprietary_codecs=true -D ffmpeg_branding="Chrome"
        python script/build.py -c Release
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          electron/out/Release/electron.exe
          electron/out/Release/*.pak
          electron/out/Release/locales/*
          electron/out/Release/*.dll
        tag_name: v${{ github.run_number }}
        body: |
          Custom Electron build with advanced codec support:
          - AC3 Audio Support
          - DTS Audio Support
          - Dolby Vision Support
          - HEVC/H.265 Support
          
          Built with FFmpeg Chrome branding for enhanced codec support.
        draft: true
